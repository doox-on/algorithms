# 🧭 Two Sum Summary

## 📌 Key Concepts

- Brute force: Check all pairs (O(n²))
- Hash map: Store seen numbers and their indices (O(n))
- Two pointer (if array is sorted): Use left/right pointers (O(n))

---



## 🔁 Brute Force Version (O(n²))

```c
// This is a simple brute force version.

int* twoSum(int* nums, int numsSize, int target, int* returnSize) {
    int* result = (int*)malloc(sizeof(int) * 2);
    *returnSize = 2;
    for (int i = 0; i < numsSize - 1; i++) {
        for (int j = i + 1; j < numsSize; j++) {
            if (nums[i] + nums[j] == target) {
                result[0] = i;
                result[1] = j;
                return result;
            }
        }
    }
    *returnSize = 0;
    return NULL;
}


## 🔁 Hash Map Version (Optimal, O(n))

```c
// Note: Hash map not natively available in C.

int* twoSum(int* nums, int numsSize, int target, int* returnSize) {
    int* result = (int*)malloc(sizeof(int) * 2);
    *returnSize = 2;
    for (int i = 0; i < numsSize - 1; i++) {
        for (int j = i + 1; j < numsSize; j++) {
            if (nums[i] + nums[j] == target) {
                result[0] = i;
                result[1] = j;
                return result;
            }
        }
    }
    *returnSize = 0;
    return NULL;
}

---

## 🧠 Common Pitfalls

- Off-by-one errors in `left = mid + 1` or `right = mid - 1`
- Forgetting to use the overflow-safe midpoint formula
- Mixing up loop conditions: `left <= right` vs `left < right`

---

## 🔍 Related LeetCode Problems

- [Leetcode 704: Binary Search](https://leetcode.com/problems/binary-search/description/) [2025-05-28]
- [Leetcode 1: Two Sum](https://leetcode.com/problems/two-sum/description/)
- Leetcode 35: Search Insert Position
- Leetcode 278: First Bad Version

---

## 🤔 Interview Checklist

- [ ] Can you implement both iterative and recursive versions?
- [ ] Can you explain upper vs. lower bound binary search?
- [ ] Can you apply binary search to custom conditions (e.g., `isBadVersion`)?

---

## 🧪 Personal Notes

- Initially confused about when to update `left` and `right`
- Forgot to handle `left == right` edge case correctly
- Mixed up logic when `arr[mid] == target`


이거의 two sum 버전도 만들어줘 
